📝rescue_from ActiveRecord::RecordNotFound, with: :catch_not_found
And, add this method to the bottom of the file, right before the end that ends the class:

def catch_not_found(e)
      Rails.logger.debug("We had a not found exception.")
      flash.alert = e.to_s
      redirect_to customers_path
end


    📝Explaining This Code
    The rescue_from statement says that if an exception of the specified type occurs, call the catch_not_found method.

    The Rails.logger.debug statement writes an entry to the Rails log. You will see it in the console, and it is also written to the log/development.log file.

    The flash.alert statement takes the message from the exception and stores it in the flash object so that it can be displayed to the user.

    The redirect_to statement puts up the index page again, so that the user does not see that other error page.



LESSON 9

bin/rails generate model Order product_name:string product_count:integer customer:references

> customer:references creates a customer_id column

> in the above line of code customer:references will generate "t.references :customer, null: false, foreign_key: true" in the migration file which does the following:


"t.references :customer" will be translated into "t.integer :customer_id" in a migration file
If you include foreign_key: true, Rails also adds a foreign key constraint to this column, which ensures referential integrity. This means that the customer_id column in the orders table must correspond to an existing id in the customers table.

